service: trigger-dynamo
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  environment:
    DYNAMODB_TABLE: Heroes
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:PutItem
        - dynamodb:ListStreams #permissao pre listar os stream(como se fosse trigger, pelo que entendi)
        - dynamodb:DescribeStream #descrever o stream
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

resources:
  Resources:
    HeroesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions: #criacao dos atributos da tabela
          - AttributeName: id #nome id
            AttributeType: S #tipo string, I seria inteiro e por ai vai...
          - AttributeName: name #nome name
            AttributeType: S #tipo string
        KeySchema:
          - AttributeName: id 
            KeyType: HASH #informando que a chave usada pra pesquisar
          - AttributeName: name
            KeyType: RANGE #isso melhora na pesquisa(pelo que entendo eh como se fosse um index)
        ProvisionedThroughput: #configuracoes de leitura/escrita no banco(menor paga menos, mais paga mais)
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification: #configura que os trigger serao para novos e update de antigas entrada na tabela
          StreamViewType: NEW_AND_OLD_IMAGES          

functions:
  hero-insert:
    handler: handler.heroesInsert
    events:
      - httpApi:
          path: /heroes
          method: get
  #function invocada via trigger no dynamo db
  hero-trigger:
    handler: handler.heroesTrigger
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: #pegando o ARN da tabela criada
              - HeroesTable
              - StreamArn